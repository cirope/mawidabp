service: mawidabp

image: mawidabp

servers:
  web:
    hosts:
      - 34.231.104.28
    labels:
      traefik.http.routers.mawidabp.entrypoints: websecure
      traefik.http.routers.mawidabp.rule: Host(`kamal.mawidabp.com`)
      traefik.http.routers.mawidabp.tls.certresolver: letsencrypt
      #traefik.http.routers.mawidabp.tls.domains.main: "kamal.mawidabp.com"
      #traefik.http.routers.mawidabp.tls.domains.sans: "admin-kamal.mawidabp.com"

registry:
  # Specify the registry server, if you're not using Docker Hub
  server: 030650017690.dkr.ecr.us-east-1.amazonaws.com
  username: AWS
  password: <%= %x(aws ecr get-login-password) %>

env:
  clear:
    DB_HOST: 34.231.104.28
  secret:
    - POSTGRES_PASSWORD

#Use a different ssh user than root
#ssh:
#  user: root

builder:
  args:
    - APP_HOST
#  args:
#    RUBY_VERSION: 3.3.0
        #   secrets:
        #     - GITHUB_TOKEN
  remote:
    arch: arm64
    host: ssh://root@34.231.104.28

accessories:
  db:
    image: postgres:16
    host: 34.231.104.28
    port: 5432
    env:
      clear:
        POSTGRES_USER: 'mawidabp'
        POSTGRES_DB: 'mawidabp_production'
      secret:
        - POSTGRES_PASSWORD
    files:
      - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
    directories:
      - data:/var/lib/postgresql/data
    redis:
      image: redis:7.0
      host: 34.231.104.28
      port: 6379
    directories:
      - data:/data

#builder:
#  multiarch: false

traefik:
  options:
    publish:
      - "443:443"
    volume:
      - "/letsencrypt/acme.json:/letsencrypt/acme.json"
  args:
    accesslog: true
    accesslog.format: json
    entryPoints.web.address: ":80"
    entryPoints.websecure.address: ":443"
    entryPoints.web.http.redirections.entryPoint.to: websecure # We want to force https
    entryPoints.web.http.redirections.entryPoint.scheme: https
    entryPoints.web.http.redirections.entrypoint.permanent: true
    certificatesResolvers.letsencrypt.acme.email: "sergio@hullop.com"
    certificatesResolvers.letsencrypt.acme.storage: "/letsencrypt/acme.json"
    certificatesResolvers.letsencrypt.acme.httpchallenge: true
    certificatesResolvers.letsencrypt.acme.httpchallenge.entrypoint: web
      # Configure custom arguments for Traefik
#traefik:
#  args:
#    accesslog: true
#    accesslog.format: json

      # Configure a custom healthcheck (default is /up on port 3000)
healthcheck:
  path: /healthy

      # Bridge fingerprinted assets, like JS and CSS, between versions to avoid
      # hitting 404 on in-flight requests. Combines all files from new and old
      # version inside the asset_path.
      # asset_path: /rails/public/assets

      # Configure rolling deploys by setting a wait time between batches of restarts.
            # boot:
            #   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
            #   wait: 2

            # Configure the role used to determine the primary_host. This host takes
            # deploy locks, runs health checks during the deploy, and follow logs, etc.
            #
            # Caution: there's no support for role renaming yet, so be careful to cleanup
            #          the previous role on the deployed hosts.
            # primary_role: web

            # Controls if we abort when see a role with no hosts. Disabling this may be
            # useful for more complex deploy configurations.
            #
            # allow_empty_roles: false
