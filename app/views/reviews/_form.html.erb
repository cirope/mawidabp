<% readonly = @review.has_final_review? %>
<% frozen = @review.is_frozen? %>
<%= simple_form_for @review do |f| %>
  <% js_extra = "var lastWorkPaperCode = '#{next_review_work_paper_code(@review)}';" %>
  <% unless readonly %>
    <% js_extra << "var control_objective='#{escape_javascript render(
      :partial => 'procedure_control_subitem',
      :locals => { f: f, :procedure_control_subitem => ProcedureControlSubitem.new,
      :is_dynamic => true})}';" %>
  <% end %>
  <%= f.error_notification %>

  <div class="form-inputs">
    <div class="row">
      <div class="col-md-6">
        <%= f.input :identification, label: raw(Review.human_attribute_name(:identification) +
          show_inline_help_for(:review_identification)), input_html: { readonly: readonly } %>
        <% if [:new, :create].include?(controller.action_name.to_sym) %>
          <%= f.input :period_id, label: raw(Review.human_attribute_name(:period_id) +
            link_to_add(new_period_path(:back_to => new_review_path))),
            collection: Period.list.map { |p| [p.inspect, p.id] }, prompt: true %>
        <% else %>
          <%= f.input :period_description, label: Review.human_attribute_name('period_id'),
            input_html: { value: @review.period.inspect, readonly: true } %>
        <% end %>
        <% if @review.new_record? %>
          <div class="form-group">
            <%= f.label :plan_item_id %>
            <%= review_plan_item_field(f, readonly) %>
          </div>
        <% else %>
          <%= f.input :plan_item,
            input_html: { value: @review.plan_item.project, readonly: true } %>
        <% end %>
        <%= f.input :business_unit,
          input_html: { value: review_business_unit_text(@review), readonly: true } %>
        <%= f.input :audit_type, label: raw(Review.human_attribute_name(:audit_type) +
          show_inline_help_for(:review_audit_type)), input_html: {
          value: review_business_unit_type_text(@review), readonly: true } %>
        <%= f.input :description, label: raw(Review.human_attribute_name(:description) +
          show_inline_help_for(:review_description)), input_html: { readonly: readonly } %>
      </div>
      <div class="col-md-6">
        <%= f.input :survey, label: raw(Review.human_attribute_name(:survey) +
          show_inline_help_for(:review_survey)), input_html: { readonly: readonly } %>
        <%= f.label :file_model_id %>
        <% f.object.build_file_model unless f.object.file_model %>
        <%= f.simple_fields_for :file_model do |fm_f| %>
          <div class="row">
            <div class="col-md-11">
              <% unless readonly %>
                <span class="file_container">
                  <%= fm_f.input :file, label: false, input_html: { class: 'file' } %>
                  <%= fm_f.input :file_cache, as: :hidden, input_html: { title: fm_f.object.identifier } %>
                </span>
              <% end %>
            </div>
            <div class="col-md-1">
              <div class="show_hide">
                <% if f.object.file_model.try(:file?) && !f.object.file_model.new_record? %>
                  <%= link_to_download f.object.file_model.file.url %>
                  <%= link_to_delete_attachment fm_f, :file unless readonly %>
                <% end %>
              </div>
            </div>
          </div>
        <% end %>
        <p>
          <%= link_to_unless @review.new_record?, t('review.survey.download'),
            :action => :survey_pdf, :id => @review, :_ts => Time.now.to_i %>
        </p>
        <div id="estimated_amount">
          <%= render partial: 'estimated_amount', locals: { plan_item: @review.plan_item } %>
        </div>
      </div>
    </div>
  </div>

  <div class="row">
    <div class="col-md-5">
      <h5><strong><%= ReviewUserAssignment.human_attribute_name :user %></strong></h5>
    </div>
    <div class="col-md-5">
      <h5><strong><%= raw(ReviewUserAssignment.human_attribute_name(:assignment_type) +
        show_inline_help_for(:review_user_assignment_type)) %></strong></h5>
    </div>
  </div>

  <div id="review_user_assignments">
    <%= f.simple_fields_for :review_user_assignments do |rua_f| %>
      <%= render partial: 'review_user_assignment', locals: { f: rua_f, readonly: readonly } %>
    <% end %>
  </div>

  <% unless readonly %>
    <%= link_to_add_fields(t('review.add_user_assignment'), f, :review_user_assignments) %>
  <% end %>

  <% unless @review.control_objective_items.empty? %>
    <h2 style="margin-top: 30px;"><strong><%= t('review.control_objective_items_label') %></strong></h2>
    <hr />
    <div id="control_objective_items">
      <% @review.grouped_control_objective_items.each do |pc, cois| %>
        <div id="process_control_<%= pc.id %>" class="process_control">
          <h4><strong>
            <%= pc.name %>
            <%= link_to_move :class => 'process_control_move' unless readonly %>
          </strong></h4>
          <%= f.simple_fields_for :control_objective_items, cois.sort do |coi_f| %>
            <%= render partial: 'control_objective_item', locals: { co_f: coi_f, readonly: readonly } %>
          <% end %>
        </div>
        <script type="text/javascript">
          Helper.makeSortable('#process_control_<%= pc.id %>', 'div.control_objective_item', 'a.move');
        </script>
      <% end %>
    </div>
  <% end %>

  <% unless readonly %>
    <div class="row">
      <div class="col-md-6">
        <h5><strong><%= ControlObjective.model_name.human %></strong></h5>
      </div>
    </div>

    <div id="control_objectives"></div>

    <%= link_to t('review.add_control_objective'), '#',
      'data-event' => 'addNestedItem', 'data-template' => :control_objective,
      'data-container' => '#control_objectives', class: 'btn btn-default btn-sm' %>
  <% end %>

  <h2><strong><%= raw(t('review.findings_label') + show_inline_help_for(:review_findings)) %></strong></h2>
  <div id="suggested_findings"></div>

  <% finding_relations = @review.finding_review_assignments.reject(&:marked_for_destruction?) %>
  <% unless finding_relations.empty? %>
    <%= f.simple_fields_for :finding_review_assignments, finding_relations do |fra_f| %>
      <%= render partial: 'finding_review_assignment_readonly', locals: { f: fra_f, readonly: readonly } %>
    <% end %>
  <% end %>

  <h2><strong><%= FindingReviewAssignment.human_attribute_name :finding %></strong></h2>
  <div id="finding_review_assignments"></div>

  <% unless readonly %>
    <%= link_to_add_fields(t('review.add_finding_assignment'), f, :finding_review_assignments) %>
    <%= link_to t('review.suggest_findings'), @review.plan_item_id ?
      suggested_findings_review_path(id: @review.plan_item_id) : '#',
      :remote => true, :id => :link_to_suggested_findings,
      :class => 'btn btn-default btn-sm' %>
  <% end %>

  <hr />

  <div class="form-actions form-footer">
    <div class="pull-right"><%= yield :form_actions %></div>
    <%= f.input :lock_version, as: :hidden %>
    <%= f.submit class: 'btn btn-primary' %>
  </div>
  <%= content_for :js_extra do %>
    <%= raw js_extra %>
  <% end %>
<% end %>
<script type="text/javascript">
//<![CDATA[
jQuery(function() {
  $('#review_plan_item_id').change(function() {
    var data_url = '<%= plan_item_data_reviews_path %>';
    var amount_url = '<%= estimated_amount_reviews_path %>';
    var element = $(this);

    $('#business_unit').val('');
    $('#audit_type').val('');

    if(!$(this).val().match(/^\s*$/)) {
      Helper.showLoading(element);

      $.get(data_url, { id: element.val(), format: 'json' }, function(data) {
        $('#business_unit').val(data.business_unit_name);
        $('#audit_type').val(data.business_unit_type);

        if(data.link_to_suggested_findings) {
          $('#link_to_suggested_findings').attr(
            'href', data.link_to_suggested_findings
          );
          $('#link_to_suggested_findings').removeClass('link_without_action');
        } else {
          $('#link_to_suggested_findings').attr('href', '#');
          $('#link_to_suggested_findings').addClass('link_without_action');
        }
      }).complete(function() {
        Helper.hideLoading(element);
      });
      
      $.get(amount_url, { id: element.val() }, function(data) {
        $('#estimated_amount').html(data);
      }).complete(function() {
        Helper.hideLoading(element);
        $('#estimated_amount').stop(true, true).effect('highlight', {}, 2000);
      });
    } else {
      $('#link_to_suggested_findings').attr('href', '#');
      $('#link_to_suggested_findings').addClass('link_without_action');
    }
  });
  
  $('#link_to_suggested_findings').click(function() {
    if($('#link_to_suggested_findings').attr('href') == '#') {
      return false;
    }
  });
  
  $('#link_to_suggested_findings').bind('ajax:success', function(event, data) {
    $('#suggested_findings').html(data);
  });
  
  $(document).on('ajax:success', '#procedure_control_link', function(event, data) {
    $('#procedure_control_data').html(data);
  });
  
  Helper.makeSortable(
    '#control_objective_items', 'div.process_control', 'a.process_control_move'
  );
  
  FormUtil.completeSortNumbers();
  
  AutoComplete.observeAll();

  HTMLUtil.stylizeAllInputFiles();
});
//]]>
</script>
