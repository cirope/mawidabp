<% readonly = @review.has_final_review? %>
<% frozen = @review.is_frozen? %>
<%= simple_form_for @review do |f| %>
  <% js_extra = "var lastWorkPaperCode = '#{next_review_work_paper_code(@review)}';" %>
  <%= render 'shared/error_explanation', f: f %>

  <div class="form-inputs">
    <div class="row">
      <div class="col-md-6">
        <% if SHOW_REVIEW_AUTOMATIC_IDENTIFICATION && !readonly %>
          <%= render 'automatic_identification', f: f %>
        <% else %>
          <%= f.input :identification, label: Review.human_attribute_name(:identification), input_html: {
            autofocus: !SHOW_REVIEW_AUTOMATIC_IDENTIFICATION && !readonly,
            readonly: readonly
          } %>
        <% end %>
        <% if @review.new_record? %>
          <%= f.input :period_id, collection: Period.list.map { |p| [p.inspect, p.id] }, prompt: true, input_html: {
            autofocus: SHOW_REVIEW_AUTOMATIC_IDENTIFICATION,
            data: { plan_item_refresh_url: plan_item_refresh_reviews_path }
          } %>
        <% else %>
          <%= f.input :period_description, label: Review.human_attribute_name('period_id'),
            input_html: { value: @review.period.inspect, readonly: true } %>
        <% end %>
        <% if @review.new_record? %>
          <div class="form-group">
            <%= f.label :plan_item_id %>
            <%= review_plan_item_field(f, readonly) %>
          </div>
        <% else %>
          <%= f.input :plan_item,
            input_html: { value: @review.plan_item.project, readonly: true } %>
        <% end %>
        <%= f.input :business_unit,
          input_html: { value: review_business_unit_text(@review), readonly: true } %>
        <%= f.input :audit_type, label: Review.human_attribute_name(:audit_type), input_html: {
          value: review_business_unit_type_text(@review), readonly: true } %>
      </div>
      <div class="col-md-6">
        <% unless HIDE_REVIEW_DESCRIPTION %>
          <%= f.input :description, label: Review.human_attribute_name(:description),
            input_html: { readonly: readonly, rows: 5 } %>
        <% end %>
        <%= f.input :survey, label: Review.human_attribute_name(:survey),
          input_html: { readonly: readonly, rows: HIDE_REVIEW_DESCRIPTION ? 8 : 5 } %>
        <% f.object.build_file_model unless f.object.file_model %>
        <h5><strong><%= Review.human_attribute_name 'file_model_id' %></strong></h5>
        <div class="clearfix">
          <%= f.simple_fields_for :file_model do |fm_f| %>
            <div class="file-container pull-left">
              <%= link_to_upload(fm_f.object) %>
              <% unless fm_f.object.file_cache %>
                <%= fm_f.input :file, label: false %>
              <% else %>
                <%= fm_f.input :file_cache, as: :hidden %>
              <% end %>
            </div>
          <% end %>
          <%= link_to_download f.object %>
        </div>
        <p>
          <%= link_to_unless @review.new_record?, t('review.survey.download'),
            :action => :survey_pdf, :id => @review, :_ts => Time.now.to_i %>
        </p>
        <div id="estimated_amount">
          <%= render partial: 'estimated_amount', locals: { plan_item: @review.plan_item } %>
        </div>
      </div>
    </div>

    <% if SHOW_REVIEW_EXTRA_ATTRIBUTES %>
      <div class="row">
        <div class="col-md-6">
          <%= f.input :scope, collection: review_scope_options, prompt: true, readonly: readonly %>
          <%= f.input :include_sox, collection: review_include_sox_options, prompt: true, readonly: readonly %>
        </div>
        <div class="col-md-6">
          <%= f.input :risk_exposure, collection: review_risk_exposure_options, prompt: true, readonly: readonly %>
          <%= f.input :manual_score, readonly: readonly, input_html: { min: 0, max: 1000, step: 1 } %>
        </div>
      </div>
    <% end %>
  </div>

  <div class="row">
    <div class="col-md-6">
      <h5><strong><%= ReviewUserAssignment.human_attribute_name 'user' %></strong></h5>
    </div>
    <div class="col-md-<%= SHOW_CONCLUSION_ALTERNATIVE_PDF ? 5 : 3 %>">
      <h5><strong><%= ReviewUserAssignment.human_attribute_name 'assignment_type' %></strong></h5>
    </div>
    <% unless SHOW_CONCLUSION_ALTERNATIVE_PDF %>
      <div class="col-md-1">
        <h5><strong><%= ReviewUserAssignment.human_attribute_name 'include_signature' %></strong></h5>
      </div>
      <div class="col-md-1">
        <h5><strong><%= ReviewUserAssignment.human_attribute_name 'owner' %></strong></h5>
      </div>
    <% end %>
  </div>

  <div id="review_user_assignments">
    <% audit_team, others = @review.review_user_assignments.partition &:in_audit_team? %>

    <% if audit_team.present? %>
      <h4><%= t 'review.user_assignment.audit_team' %></h4>

      <%= f.simple_fields_for :review_user_assignments, audit_team do |rua_f| %>
        <%= render 'review_user_assignment', f: rua_f, readonly: readonly %>
      <% end %>
    <% end %>

    <% if others.present? %>
      <h4><%= t 'review.user_assignment.others' %></h4>

      <%= f.simple_fields_for :review_user_assignments, others do |rua_f| %>
        <%= render 'review_user_assignment', f: rua_f, readonly: readonly %>
      <% end %>
    <% end %>

    <% unless readonly %>
      <hr>

      <%= link_to_add_fields(
        t('review.add_user_assignment'), f, :review_user_assignments, nil, {}, { readonly: readonly }
      ) %>
    <% end %>
  </div>

  <% if !readonly || @review.taggings.any? %>
    <br />
    <h4 <%== @review.errors[:taggings].present? ? 'class="text-danger"' : '' %>>
      <%= Tag.model_name.human count: 0 %>
    </h4>

    <div class="row">
      <div class="col-md-6">
        <h5><strong><%= Tag.human_attribute_name :name %></strong></h5>
      </div>
    </div>

    <div id="taggings">
      <%= f.simple_fields_for :taggings do |fr_f| %>
        <%= render 'reviews/tagging', f: fr_f, readonly: readonly %>
      <% end %>

      <%= link_to_add_fields(t('review.add_tagging'), f, :taggings, 'reviews/tagging', {}, { readonly: readonly }) unless readonly %>
    </div>
  <% end %>

  <% unless @review.control_objective_items.empty? %>
    <h3><%= t('review.control_objective_items_label') %></h3>

    <hr />

    <div id="control_objective_items">
      <% @review.grouped_control_objective_items.each do |pc, cois| %>
        <div id="process_control_<%= pc.id %>" class="process_control">
          <h4>
            <%= pc.name %> |
            <% unless readonly %>
              <%= link_to_suggested_process_control_findings(pc) %> |
              <%= link_to_move :class => 'process_control_move' %>
            <% end %>
          </h4>
          <%= f.simple_fields_for :control_objective_items, cois.sort do |coi_f| %>
            <%= render 'control_objective_item', f: coi_f, readonly: readonly %>
          <% end %>
        </div>
        <script type="text/javascript">
          Helper.makeSortable('#process_control_<%= pc.id %>', 'fieldset.control_objective_item', 'a.move');
        </script>
      <% end %>
    </div>
  <% end %>

  <% unless readonly %>
    <h5><strong><%= ControlObjective.model_name.human %></strong></h5>

    <div id="control_objectives">
      <%= link_to_add_fields(
        t('review.add_control_objective'), f, :control_objective_items, 'control_objective'
      ) %>
    </div>

    <hr />

    <h5><strong><%= ProcessControl.model_name.human %></strong></h5>

    <div id="process_controls">
      <%= link_to_add_fields(
        t('review.add_process_control'), f, :control_objective_items, 'process_control'
      ) %>
    </div>
  <% end %>

  <h3><%= t 'review.findings_label' %></h3>

  <hr />

  <div id="suggested_process_control_findings"></div>
  <div id="suggested_findings"></div>

  <% finding_relations = @review.finding_review_assignments.reject(&:marked_for_destruction?) %>
  <% unless finding_relations.empty? %>
    <%= f.simple_fields_for :finding_review_assignments, finding_relations do |fra_f| %>
      <%= render 'finding_review_assignment_readonly', f: fra_f, readonly: readonly %>
    <% end %>
  <% end %>

  <% unless readonly %>
    <h5><strong><%= FindingReviewAssignment.human_attribute_name 'finding' %></strong></h5>

    <div id="finding_review_assignments"></div>

    <%= link_to_add_fields t('review.add_finding_assignment'), f, :finding_review_assignments %>
    <%= link_to t('review.suggest_findings'), @review.plan_item_id ?
      suggested_findings_review_path(id: @review.plan_item_id) : '#',
      :remote => true, :id => :link_to_suggested_findings,
      :class => 'btn btn-default btn-sm' %>
  <% end %>

  <hr />

  <div class="form-actions">
    <div class="pull-right"><%= yield :form_actions %></div>
    <%= f.input :lock_version, as: :hidden %>
    <%= f.submit class: 'btn btn-primary' %>
  </div>
  <%= content_for :js_extra do %>
    <%= raw js_extra %>
  <% end %>
<% end %>
<script type="text/javascript">
jQuery(function() {
  $('#review_plan_item_id').change(function() {
    var data_url = '<%= plan_item_data_reviews_path %>';
    var amount_url = '<%= estimated_amount_reviews_path %>';
    var element = $(this);
    var prefix = $('#review_identification_prefix').val();

    $('#review_business_unit').val('');
    $('#review_audit_type').val('');

    if(!$(this).val().match(/^\s*$/)) {
      Helper.showLoading(element);

      $.get(data_url, { id: element.val(), format: 'json' }, function(data) {
        $('#review_business_unit').val(data.business_unit_name);
        $('#review_audit_type').val(data.business_unit_type);

        if (prefix !== data.business_unit_prefix) {
          $('#review_identification_prefix').
            val(data.business_unit_prefix).
            change().
            css('border-color', '#47ae00').
            delay(1000).
            animate({'border-color': '#c2bfB7'}, 50)
        }

        if(data.link_to_suggested_findings) {
          $('#link_to_suggested_findings').attr(
            'href', data.link_to_suggested_findings
          );
          $('#link_to_suggested_findings').removeClass('link_without_action');
        } else {
          $('#link_to_suggested_findings').attr('href', '#');
          $('#link_to_suggested_findings').addClass('link_without_action');
        }
      }).complete(function() {
        Helper.hideLoading(element);
      });

      $.get(amount_url, { id: element.val() }, function(data) {
        $('#estimated_amount').html(data);
      }).complete(function() {
        Helper.hideLoading(element);
        $('#estimated_amount').effect('highlight', {}, 2000);
      });
    } else {
      $('#review_identification_prefix').prop('disabled', false).val('');
      $('#review_identification_number').val('');
      $('#link_to_suggested_findings').attr('href', '#');
      $('#link_to_suggested_findings').addClass('link_without_action');
      $('#estimated_amount').html('');
    }
  });

  $('#link_to_suggested_findings').click(function() {
    if($('#link_to_suggested_findings').attr('href') == '#') {
      return false;
    }
  });

  $('#link_to_suggested_findings').bind('ajax:success', function(event, data) {
    $('#suggested_findings').html(data);
  });

  Helper.makeSortable(
    '#control_objective_items', 'div.process_control', 'a.process_control_move'
  );

  FormUtil.completeSortNumbers();
});
</script>
