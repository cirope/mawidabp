<% readonly = @control_objective_item.is_in_a_final_review? %>
<% frozen = @control_objective_item.review.try(:is_frozen?) %>
<!--[form:control_objective_item]-->
<%= form_for @control_objective_item, :html => {:multipart => true} do |co_f| %>
  <% unless frozen %>
    <% content_for :js_extra do %>
      <%= raw "var lastWorkPaperCode = '#{next_control_objective_work_paper_code(
        @control_objective_item)}';" %>
      <%= raw "var work_paper='#{generate_template(co_f, :work_papers,
        {:form_builder_local => :wp_f,
        :partial => 'work_papers/work_paper',
        :locals => {:child_index => 'NEW_RECORD', :frozen => false},
        :object => WorkPaper.new(:organization_id => @auth_organization.id)})}';" %>
    <% end %>
  <% end %>
  <%= co_f.error_messages %>
  <div class="form_column_left">
    <p class="form_item">
      <label class="inline"><%= Review.model_name.human %></label>
      <%= text_field_tag :review_identification,
        @control_objective_item.review.identification,
        :size => nil, :class => :inline_item, :readonly => true %>
    </p>

    <p class="form_item">
      <label class="inline"><%= ProcessControl.model_name.human %></label>
      <%= text_field_tag :process_control_name,
        @control_objective_item.control_objective.process_control.name,
        :size => nil, :class => :inline_item, :readonly => true %>
    </p>

    <p class="form_item">
      <label class="inline"><%= Period.model_name.human %></label>
      <%= text_field_tag :period, @control_objective_item.review.period.inspect,
        :size => nil, :class => :inline_item, :readonly => true %>
    </p>
    <p class="form_item">
      <%= co_f.label :relevance, raw(
        ControlObjectiveItem.human_attribute_name(:relevance) +
          show_inline_help_for(:control_objective_item_relevance)),
        :class => :inline %>
      <%= co_f.select :relevance, parameter_in(@auth_organization.id,
        :admin_control_objective_importances,
        @control_objective_item.created_at, true),
        {:include_blank => t('control_objective_item.not_rated')},
        {:class => :inline_item, :disabled => readonly} %>
    </p>
    <p class="form_item">
      <%= co_f.label :audit_date, nil, :class => :inline %>
      <%= calendar_text_field co_f, :audit_date, false, nil,
        :class => :inline_item, :disabled => readonly %>
    </p>
    <p>
      <%= co_f.label :control_objective_text %>
      <%= co_f.text_area :control_objective_text, :autofocus => true,
        :readonly => readonly %>
    </p>
    <%= co_f.fields_for :control do |c_f| %>
      <p>
        <%= c_f.label :effects, raw(Control.human_attribute_name(:effects) +
            show_inline_help_for(:control_objective_item_effects)) %>
        <%= c_f.text_area :effects, :readonly => readonly %>
      </p>
      <p>
        <%= c_f.label :control, raw(Control.human_attribute_name(:control) +
            show_inline_help_for(:control_objective_item_control)) %>
        <%= c_f.text_area :control, :readonly => readonly %>
      </p>

      <p class="form_item">
        <%= content_tag :label, raw(
          ControlObjectiveItem.human_attribute_name(:effectiveness) +
            show_inline_help_for(:control_objective_item_effectiveness)),
          :class => :inline %>
        <%= text_field_tag :effectiveness,
          "#{@control_objective_item.effectiveness}%", :class => :inline_item,
          :readonly => true %>
      </p>
      <p class="form_item">
        <%= co_f.label :finished, raw(
          ControlObjectiveItem.human_attribute_name(:finished) +
            show_inline_help_for(:control_objective_item_finished)),
          :class => :inline %>
        <%= co_f.check_box :finished, :class => :inline_item,
          :disabled => readonly %>
      </p>
      <p class="form_item">
        <%= co_f.label :exclude_from_score, raw(
          ControlObjectiveItem.human_attribute_name(:exclude_from_score) +
            show_inline_help_for(:control_objective_item_exclude_from_score)),
          :class => :inline %>
        <%= co_f.check_box :exclude_from_score, :class => :inline_item,
          :disabled => readonly %>
      </p>

      <% content_for :design_tests do %>
        <%= c_f.label :design_tests %>
        <%= c_f.text_area :design_tests, :readonly => readonly %>
      <% end %>

      <% content_for :compliance_tests do %>
        <%= c_f.label :compliance_tests %>
        <%= c_f.text_area :compliance_tests, :readonly => readonly %>
      <% end %>

      <% content_for :sustantive_tests do %>
        <%= c_f.label :sustantive_tests %>
        <%= c_f.text_area :sustantive_tests, :readonly => readonly %>
      <% end %>
    <% end %>
  </div>
  <div class="form_column_right">
    <p>
      <%= co_f.label :design_score %>
      <%= co_f.select :design_score,
        parameter_in(@auth_organization.id,
        :admin_control_objective_qualifications,
        @control_objective_item.created_at, true),
        {:include_blank => t('control_objective_item.not_rated')},
        {:disabled => readonly} %>
    </p>
    <p>
      <%= yield :design_tests %>
    </p>
    <p>
      <%= co_f.label :compliance_score %>
      <%= co_f.select :compliance_score,
        parameter_in(@auth_organization.id,
        :admin_control_objective_qualifications,
        @control_objective_item.created_at, true),
        {:include_blank => t('control_objective_item.not_rated')},
        {:disabled => readonly} %>
    </p>
    <p>
      <%= yield :compliance_tests %>
    </p>
    <p>
      <%= co_f.label :sustantive_score %>
      <%= co_f.select :sustantive_score,
        parameter_in(@auth_organization.id,
        :admin_control_objective_qualifications,
        @control_objective_item.created_at, true),
        {:include_blank => t('control_objective_item.not_rated')},
        {:disabled => readonly} %>
    </p>
    <p>
      <%= yield :sustantive_tests %>
    </p>
    <p>
      <%= co_f.label :auditor_comment %>
      <%= co_f.text_area :auditor_comment, :readonly => readonly %>
    </p>
  </div>

  <%= render :partial => 'weaknesses_summary', :locals => {:readonly => readonly} %>

  <h1>
    <%= raw(ControlObjectiveItem.human_attribute_name(:work_papers,
      :count => @control_objective_item.work_papers.size) +
      show_inline_help_for(:control_objective_item_work_papers)) %>
  </h1>

  <div>
    <div class="column_headers">
      <div class="item_column" style="width: 20%;">
        <h3><%= WorkPaper.human_attribute_name :name %></h3>
      </div>
      <div class="item_column" style="width: 20%;">
        <h3><%= WorkPaper.human_attribute_name :code %></h3>
      </div>
      <div class="item_column" style="width: 15%;">
        <h3><%= WorkPaper.human_attribute_name :number_of_pages %></h3>
      </div>
      <div class="item_column" style="width: 25%;">
        <h3><%= WorkPaper.human_attribute_name :description %></h3>
      </div>
      <div class="item_column" style="width: 10%;">
        <h3><%= WorkPaper.human_attribute_name :file_model %></h3>
      </div>
      <div class="item_column" style="width: 10%;"></div>
      <div class="clear"></div>
    </div>

    <div id="work_papers">
      <%= co_f.fields_for :work_papers do |wp_f| %>
        <%= render :partial => 'work_papers/work_paper', :locals =>
          {:wp_f => wp_f, :is_dynamic => false, :frozen => frozen,
          :child_index => 'NEW_RECORD'} %>
      <% end %>
    </div>
  </div>

  <p class="add_item">
    <%= link_to_unless frozen, t('control_objective_item.add_work_paper'),
      '#', 'data-template' => :work_paper,
      'data-event' => 'addNestedItem',
      'data-container' => '#work_papers' %>
  </p>

  <%= hidden_lock_version(co_f) %>

  <div style="display:none"><%= co_f.hidden_field :control_objective_id %></div>

  <p>
    <span class="button"><%= co_f.submit %></span>
  </p>
<% end %>
<!--[eoform:control_objective_item] -->
<script type="text/javascript">
  var ControlObjectiveCalcs = {
    effectiveness: function() {
      var selectedValues = [];
      var designElement = $('#control_objective_item_design_score');
      var complianceElement = $('#control_objective_item_compliance_score');
      var sustantiveElement = $('#control_objective_item_sustantive_score');
      var maxValue = 0;
      var total = 0;
      var count = 0;
      
      $.each(designElement.get(0).options, function(i, e) {
        if(parseInt(e.value) > maxValue) { maxValue = parseInt(e.value) }
      });

      selectedValues.push(parseInt(designElement.val()));
      selectedValues.push(parseInt(complianceElement.val()));
      selectedValues.push(parseInt(sustantiveElement.val()));
      
      $.each(selectedValues, function(i, e) {
        if(e) {
          total += e;
          count += 1;
        }
      });

      var percentage = count == 0 || maxValue == 0 ?
        100 : ((total / count) * 100.0 / maxValue).toFixed(0);

      $('#effectiveness').val(percentage + '%');

      $('#effectiveness').css('border-color', '#47ae00').delay(1000).animate(
        { 'border-color': '#c2bfB7' }, 50
      );
    }
  }

  $('#control_objective_item_design_score').change(function() {
    ControlObjectiveCalcs.effectiveness();
  });

  $('#control_objective_item_compliance_score').change(function() {
    ControlObjectiveCalcs.effectiveness();
  });

  $('#control_objective_item_sustantive_score').change(function() {
    ControlObjectiveCalcs.effectiveness();
  });
</script>