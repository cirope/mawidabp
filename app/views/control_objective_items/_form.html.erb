<% readonly = @control_objective_item.is_in_a_final_review? %>
<% frozen = @control_objective_item.review.try(:is_frozen?) %>

<%= simple_form_for @control_objective_item do |f| %>
    <% content_for :js_extra do %>
      <%= raw("var lastWorkPaperCode = '#{next_control_objective_work_paper_code(@control_objective_item)}';") unless frozen %>
    <% end %>
  <%= render 'shared/error_explanation', f: f %>

  <div class="form-inputs">
    <div class="row">
      <div class="col-md-6">
        <%= f.input :review_identification, label: Review.model_name.human, input_html: {
          value: @control_objective_item.review.identification, readonly: true
        } %>
        <%= f.input :process_control_name, label: ProcessControl.model_name.human, input_html: {
          value: @control_objective_item.control_objective.process_control.name, readonly: true
        } %>
        <%= f.input :period, label: Period.model_name.human, input_html: {
          value: @control_objective_item.review.period.inspect, readonly: true
        } %>
        <%= relevance_field(f,
          label: ControlObjectiveItem.human_attribute_name(:relevance),
          input_html: { include_blank: t('control_objective_item.not_rated'), disabled: readonly }
        ) %>
        <%= f.input :audit_date, as: :date_picker, input_html: { disabled: readonly } %>
        <%= f.input :control_objective_text, input_html: { autofocus: true, readonly: readonly } %>

        <%= f.simple_fields_for :control do |c_f| %>
          <%= c_f.input :effects, label: Control.human_attribute_name(:effects), input_html: { readonly: readonly } %>
          <%= c_f.input :control, label: Control.human_attribute_name(:control), input_html: { readonly: readonly } %>
          <%= f.input :effectiveness, label: ControlObjectiveItem.human_attribute_name(:effectiveness),
            input_html: { value: "#{@control_objective_item.effectiveness}%", readonly: true } %>
          <%= f.input :finished, as: :boolean, label: false, inline_label:
            ControlObjectiveItem.human_attribute_name(:finished),
            input_html: { disabled: readonly } %>
          <%= f.input :exclude_from_score, as: :boolean, label: false, inline_label:
            ControlObjectiveItem.human_attribute_name(:exclude_from_score),
            input_html: { disabled: readonly } %>

          <% content_for :design_tests do %>
            <%= c_f.input :design_tests, input_html: { readonly: readonly } %>
          <% end %>
          <% content_for :compliance_tests do %>
            <%= c_f.input :compliance_tests, input_html: { readonly: readonly } %>
          <% end %>
          <% content_for :sustantive_tests do %>
            <%= c_f.input :sustantive_tests, input_html: { readonly: readonly } %>
          <% end %>
        <% end %>
      </div>
      <div class="col-md-6">
        <%= qualification_field(f, :design_score, input_html: {
          include_blank: t('control_objective_item.not_rated'), disabled: readonly }) %>
        <%= yield :design_tests %>

        <%= qualification_field(f, :compliance_score, input_html: {
          include_blank: t('control_objective_item.not_rated'), disabled: readonly }) %>
        <%= yield :compliance_tests %>

        <%= qualification_field(f, :sustantive_score, input_html: {
          include_blank: t('control_objective_item.not_rated'), disabled: readonly }) %>
        <%= yield :sustantive_tests %>

        <%= f.input :auditor_comment, input_html: { readonly: readonly } %>
      </div>
    </div>
  </div>

  <br />
  <%= render 'weaknesses_summary', readonly: readonly %>

  <br />
  <%= render 'oportunities_summary', readonly: readonly %>
  <% if current_organization.kind.eql? 'quality_management' %>
    <br />
    <%= render 'fortresses_summary', readonly: readonly %>
    <br />
    <%= render 'nonconformities_summary', readonly: readonly %>
    <br />
    <%= render 'potential_nonconformities_summary', readonly: readonly %>
  <% end %>

  <br />
  <h4>
    <%= ControlObjectiveItem.human_attribute_name(:work_papers,
      :count => @control_objective_item.work_papers.size) %>
  </h4>
  <div class="row">
    <div class="col-md-3">
      <h5><strong><%= WorkPaper.human_attribute_name :name %></strong></h5>
    </div>
    <div class="col-md-2">
      <h5><strong><%= WorkPaper.human_attribute_name :code %></strong></h5>
    </div>
    <div class="col-md-2">
      <h5><strong><%= WorkPaper.human_attribute_name :number_of_pages %></strong></h5>
    </div>
    <div class="col-md-2">
      <h5><strong><%= WorkPaper.human_attribute_name :description %></strong></h5>
    </div>
    <div class="col-md-2">
      <h5><strong><%= WorkPaper.human_attribute_name :file_model %></strong></h5>
    </div>
  </div>

  <div id="work_papers">
    <%= f.simple_fields_for :work_papers do |wp_f| %>
      <%= render 'work_papers/work_paper', f: wp_f, frozen: frozen %>
    <% end %>

    <%= link_to_add_fields(t('control_objective_item.add_work_paper'), f, :work_papers,
      'work_papers/work_paper') unless frozen %>
  </div>

  <hr />

  <div class="form-actions form-footer">
    <div class="pull-right"><%= yield :form_actions %></div>
    <%= f.input :lock_version, as: :hidden %>
    <%= f.input :control_objective_id, as: :hidden %>
    <%= f.submit class: 'btn btn-primary' %>
  </div>
<% end %>
<script type="text/javascript">
  var ControlObjectiveCalcs = {
    effectiveness: function() {
      var selectedValues = [];
      var designElement = $('#control_objective_item_design_score');
      var complianceElement = $('#control_objective_item_compliance_score');
      var sustantiveElement = $('#control_objective_item_sustantive_score');
      var maxValue = 0;
      var total = 0;
      var count = 0;

      $.each(designElement.get(0).options, function(i, e) {
        if(parseInt(e.value) > maxValue) { maxValue = parseInt(e.value) }
      });

      selectedValues.push(parseInt(designElement.val()));
      selectedValues.push(parseInt(complianceElement.val()));
      selectedValues.push(parseInt(sustantiveElement.val()));

      $.each(selectedValues, function(i, e) {
        if(e) {
          total += e;
          count += 1;
        }
      });

      var percentage = count == 0 || maxValue == 0 ?
        100 : ((total / count) * 100.0 / maxValue).toFixed(0);

      $('#effectiveness').val(percentage + '%');

      $('#effectiveness').css('border-color', '#47ae00').delay(1000).animate(
        { 'border-color': '#c2bfB7' }, 50
      );
    }
  }

  $('#control_objective_item_design_score').change(function() {
    ControlObjectiveCalcs.effectiveness();
  });

  $('#control_objective_item_compliance_score').change(function() {
    ControlObjectiveCalcs.effectiveness();
  });

  $('#control_objective_item_sustantive_score').change(function() {
    ControlObjectiveCalcs.effectiveness();
  });
</script>
