<% readonly = @control_objective_item.is_in_a_final_review? %>
<% frozen = @control_objective_item.review.try(:is_frozen?) %>

<div class="card">
  <div class="card-body">
    <%= simple_form_for @control_objective_item do |f| %>
        <% content_for :js_extra do %>
          <%= raw("var lastWorkPaperCode = '#{next_control_objective_work_paper_code(@control_objective_item)}';") unless frozen %>
        <% end %>
      <%= render 'shared/error_explanation', f: f %>

      <div class="form-inputs">
        <div class="row">
          <div class="col-md-6">
            <%= f.input :review_identification, label: Review.model_name.human, input_html: {
              value: @control_objective_item.review.identification, readonly: true
            } %>
            <%= f.input :process_control_name, label: ProcessControl.model_name.human, input_html: {
              value: @control_objective_item.control_objective.process_control.name, readonly: true
            } %>
            <%= f.input :period, label: Period.model_name.human, input_html: {
              value: @control_objective_item.review.period.inspect, readonly: true
            } %>
            <%= f.input :relevance, collection: relevances,
              include_blank: t('control_objective_item.not_rated'), input_html: { disabled: readonly } %>
            <%= f.input :audit_date, as: :date_picker, input_html: { disabled: readonly } %>
            <%= f.input :control_objective_text, input_html: { autofocus: true, readonly: readonly, rows: 5 } %>

            <%= f.simple_fields_for :control do |c_f| %>
              <% unless HIDE_CONTROL_EFFECTS %>
                <%= c_f.input :effects, label: Control.human_attribute_name(:effects), input_html: { readonly: readonly, rows: 5 } %>
              <% end %>
              <%= c_f.input :control, label: Control.human_attribute_name(:control), input_html: { readonly: readonly, rows: 5 } %>

              <% unless HIDE_CONTROL_OBJECTIVE_ITEM_EFFECTIVENESS %>
                <%= f.input :effectiveness, label: ControlObjectiveItem.human_attribute_name(:effectiveness),
                  input_html: { value: "#{@control_objective_item.effectiveness}%", readonly: true } %>
                <small><%= previous_effectiveness @control_objective_item %></small>
              <% end %>

              <% test_rows = HIDE_CONTROL_COMPLIANCE_TESTS ? 7 : 5 %>
              <% content_for :design_tests do %>
                <%= c_f.input :design_tests, input_html: { readonly: readonly, rows: test_rows } %>
              <% end %>
              <% unless HIDE_CONTROL_COMPLIANCE_TESTS %>
                <% content_for :compliance_tests do %>
                  <%= c_f.input :compliance_tests, input_html: { readonly: readonly, rows: test_rows } %>
                <% end %>
              <% end %>
              <% content_for :sustantive_tests do %>
                <%= c_f.input :sustantive_tests, input_html: { readonly: readonly, rows: test_rows } %>
              <% end %>
            <% end %>
          </div>
          <div class="col-md-6">
            <%= f.input :design_score, collection: qualifications,
              include_blank: !SHOW_SHORT_QUALIFICATIONS && t('control_objective_item.not_rated'),
              prompt: SHOW_CONCLUSION_AS_OPTIONS,
              input_html: {
                disabled: readonly,
                data: {
                  score_target: 'design',
                  update_test: 'design_tests',
                  update_with: t('control_objective_item.not_apply_text'),
                  update_on: ControlObjectiveItem.qualifications[:not_apply]
                }
              }
            %>
            <%= yield :design_tests %>

            <% unless HIDE_CONTROL_COMPLIANCE_TESTS %>
              <%= f.input :compliance_score, collection: qualifications,
                include_blank: t('control_objective_item.not_rated'),
                input_html: { data: { score_target: 'compliance' }, disabled: readonly } %>
            <% end %>
            <%= yield :compliance_tests unless HIDE_CONTROL_COMPLIANCE_TESTS %>

            <%= f.input :sustantive_score, collection: qualifications,
              include_blank: !SHOW_SHORT_QUALIFICATIONS && t('control_objective_item.not_rated'),
              prompt: SHOW_CONCLUSION_AS_OPTIONS,
              input_html: {
                disabled: readonly,
                data: {
                  score_target: 'sustantive',
                  update_test: 'sustantive_tests',
                  update_with: t('control_objective_item.not_apply_text'),
                  update_on: ControlObjectiveItem.qualifications[:not_apply]
                }
              }
            %>
            <%= yield :sustantive_tests %>

            <% if SHOW_CONCLUSION_AS_OPTIONS %>
              <%= f.input :auditor_comment, collection: auditor_comment_options,
                prompt: true, input_html: { disabled: readonly } %>
            <% else %>
              <%= f.label :auditor_comment, raw(control_objective_item_label_field('auditor_comment')) %>
              <% if control_objective_item_show_history_changes?('auditor_comment') %>
                <%= render 'history_changes', attribute: 'auditor_comment' %>
              <% end %>

              <%= f.input :auditor_comment, label: false, input_html: { readonly: readonly, rows: 5 } %>
            <% end %>

            <div class="row">
              <div class="col-md-6">
                <%= f.input :finished, input_html: { disabled: readonly } %>
              </div>
              <div class="col-md-6">
                <%= f.input :exclude_from_score,
                  input_html: {
                    disabled: readonly,
                    data: {
                      automatic_auditor_comment: SHOW_CONCLUSION_AS_OPTIONS &&
                        auditor_comment_options.last&.last
                    }
                  } %>
              </div>
            </div>

          </div>
        </div>

        <% if @control_objective_item.show_counts?(current_organization.prefix) %>
          <div class="row">
            <div class="col-md-6">
              <%= f.input :issues_count, input_html: { readonly: readonly } %>
            </div>
            <div class="col-md-6">
              <%= f.input :alerts_count, input_html: { readonly: readonly } %>
            </div>
          </div>
        <% end %>

        <% if @control_objective_item.support? %>
          <p class="mb-1">
            <strong>
              <%= ControlObjectiveItem.human_attribute_name :support %>
            </strong>
            <%= link_to_download_support @control_objective_item.control_objective %>
          </p>
        <% end %>
      </div>

      <%= render 'weaknesses_summary', readonly: readonly, frozen: frozen %>

      <% unless HIDE_OPORTUNITIES %>
        <%= render 'oportunities_summary', readonly: readonly, frozen: frozen %>
      <% end %>

      <% unless HIDE_BUSINESS_UNIT_SCORES %>
        <h5 class="mt-3">
          <%= BusinessUnitScore.model_name.human count: @control_objective_item.business_unit_scores.size %>
        </h5>
        <div class="row">
          <div class="col-md-5">
            <h5 class="h6"><%= BusinessUnitScore.human_attribute_name 'business_unit_id' %></h5>
          </div>
          <div class="col-md-2">
            <h5 class="h6"><%= BusinessUnitScore.human_attribute_name 'design_score' %></h5>
          </div>
          <div class="col-md-2">
            <h5 class="h6"><%= BusinessUnitScore.human_attribute_name 'compliance_score' %></h5>
          </div>
          <div class="col-md-2">
            <h5 class="h6"><%= BusinessUnitScore.human_attribute_name 'sustantive_score' %></h5>
          </div>
        </div>

        <div id="business_unit_scores">
          <%= f.simple_fields_for :business_unit_scores do |bus_f| %>
            <%= render 'business_unit_score', f: bus_f, readonly: readonly %>
          <% end %>

          <%= link_to_add_fields(
            t('control_objective_item.add_business_unit_score'),
            f, :business_unit_scores, nil, {}, { readonly: readonly }
          ) unless readonly %>
        </div>

        <hr>

        <div id="business_unit_types">
          <%= link_to_add_fields(
            t('control_objective_item.add_business_unit_type'),
            f, :business_unit_scores, 'business_unit_type', {}, { readonly: readonly }
          ) unless readonly %>
        </div>
      <% end %>

      <h5 class="mt-3">
        <%= WorkPaper.model_name.human count: @control_objective_item.work_papers.size %>
      </h5>
      <div class="row">
        <div class="col-md-3">
          <h5 class="h6"><%= WorkPaper.human_attribute_name 'name' %></h5>
        </div>
        <div class="col-md-2 col-xxl-1">
          <h5 class="h6"><%= WorkPaper.human_attribute_name 'code' %></h5>
        </div>
        <div class="col-md-1">
          <h5 class="h6"><%= WorkPaper.human_attribute_name 'number_of_pages' %></h5>
        </div>
        <div class="col-md-3 col-xxl-4">
          <h5 class="h6"><%= WorkPaper.human_attribute_name 'description' %></h5>
        </div>
        <div class="col-md-2">
          <h5 class="h6"><%= WorkPaper.human_attribute_name 'file_model' %></h5>
        </div>
      </div>

      <div id="work_papers">
        <%= f.simple_fields_for :work_papers do |wp_f| %>
          <%= render 'work_papers/work_paper', f: wp_f, frozen: frozen %>
        <% end %>

        <%= link_to_add_fields(t('control_objective_item.add_work_paper'), f, :work_papers,
          'work_papers/work_paper') unless frozen %>
      </div>

      <hr />

      <div class="form-actions">
        <div class="float-end"><%= yield :form_actions %></div>
        <%= f.input :lock_version, as: :hidden %>
        <%= f.input :control_objective_id, as: :hidden %>
        <%= f.submit class: 'btn btn-primary', disabled: frozen %>
      </div>
    <% end %>
  </div>
</div>

<script type="text/javascript">
  var ControlObjectiveCalcs = {
    effectiveness: function() {
      var selectedValues = [];
      var designElement = $('#control_objective_item_design_score');
      var complianceElement = $('#control_objective_item_compliance_score');
      var sustantiveElement = $('#control_objective_item_sustantive_score');
      var maxValue = 0;
      var total = 0;
      var count = 0;

      $.each(designElement.get(0).options, function(i, e) {
        if(+e.value > maxValue) { maxValue = +e.value }
      });

      selectedValues.push(+designElement.val());
      selectedValues.push(+complianceElement.val());
      selectedValues.push(+sustantiveElement.val());

      $.each(selectedValues, function(i, e) {
        if(e) {
          total += e;
          count += 1;
        }
      });

      var percentage = count == 0 || maxValue == 0 ?
        100 : ((total / count) * 100.0 / maxValue).toFixed(0);

      $('#control_objective_item_effectiveness').val(percentage + '%');

      $('#control_objective_item_effectiveness').css('border-color', '#47ae00').delay(1000).animate(
        { 'border-color': '#c2bfB7' }, 50
      );
    }
  }

  $('#control_objective_item_design_score').change(function() {
    ControlObjectiveCalcs.effectiveness();
  });

  $('#control_objective_item_compliance_score').change(function() {
    ControlObjectiveCalcs.effectiveness();
  });

  $('#control_objective_item_sustantive_score').change(function() {
    ControlObjectiveCalcs.effectiveness();
  });
</script>
