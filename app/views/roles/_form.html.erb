<%= simple_form_for @role do |f| %>
  <%= render 'shared/error_explanation', f: f %>

  <div class="form-inputs">
    <div class="row">
      <div class="col-md-6">
        <%= f.input :name, input_html: { maxlength: 255, autofocus: true } %>
      </div>
      <div class="col-md-6">
        <%= role_type_field(f) %>
      </div>
    </div>
  </div>

  <table class="table table-condensed table-striped table-hover">
    <thead>
      <tr>
        <th class="text-center"><%= Privilege.model_name.human %></th>
        <th><%= Privilege.human_attribute_name :read %></th>
        <th><%= Privilege.human_attribute_name :modify %></th>
        <th><%= Privilege.human_attribute_name :erase %></th>
        <th><%= Privilege.human_attribute_name :approval %></th>
      </tr>
    </thead>
    <tbody>
      <% menu_items = @role.audited? ? APP_AUDITED_MENU_ITEMS : APP_AUDITOR_MENU_ITEMS %>

      <% menu_items.each do |menu_item| %>
        <%= render 'menu_item', menu_item: menu_item, role_form: f %>
      <% end %>
    </tbody>
  </table>

  <hr />

  <div class="form-actions">
    <div class="pull-right"><%= yield :form_actions %></div>
    <%= f.input :lock_version, as: :hidden %>
    <%= f.submit class: 'btn btn-primary' %>
  </div>
<% end %>
<script type="text/javascript">

var Privileges = {
  markChildren: function(element, checked) {
    var parent = element.closest('tr').attr('id');
    var type = element.data('type');
    var children = $('[data-parent="' + parent + '"] :checkbox[data-type="' + type + '"]');

    children.trigger('click');
  },
  markSiblings: function(element, type, checked) {
    var siblings = element.parents('tr').find('[data-type="' + type + '"]');

    siblings.attr('checked', checked);
  }
};

jQuery(function() {
  $('#role_role_type').data('resetValue', $('#role_role_type').val());

  $(':checkbox').click(function() {
    var element = $(this);
    var checked = element.is(':checked');
    var type = element.data('type');

    switch(type) {
      case 'approval':
        if(checked) {
          Privileges.markSiblings(element, 'read', checked);
        }

        Privileges.markChildren(element, checked);
        break;
      case 'erase':
        if(!checked) {
          Privileges.markSiblings(element, 'approval', checked);
        } else {
          Privileges.markSiblings(element, 'modify', checked);
          Privileges.markSiblings(element, 'read', checked);
        }

        Privileges.markChildren(element, checked);
        break;
      case 'modify':
        if(checked) {
          Privileges.markSiblings(element, 'read', checked);
        } else {
          Privileges.markSiblings(element, 'erase', checked);
          Privileges.markSiblings(element, 'approval', checked);
        }

        Privileges.markChildren(element, checked);
        break;
      case 'read':
        if(!checked) {
          Privileges.markSiblings(element, 'modify', checked);
          Privileges.markSiblings(element, 'erase', checked);
          Privileges.markSiblings(element, 'approval', checked);
        }

        Privileges.markChildren(element, checked);
        break;
    }
  });

  $('#role_role_type').change(function() {
    var selectedType = $(this).val();
    var url = '<%= @role.new_record? ? new_role_path : edit_role_path(@role) %>';

    if(selectedType) {
      BrowserManipulation.changeLocation(url, {
        'role[role_type]': selectedType
      });
    }
  });
});
</script>
