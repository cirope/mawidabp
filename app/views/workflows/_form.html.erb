<!--[form:workflow]-->
<%= form_for @workflow do |w_f| %>
  <% js_extra = "var workflow_item='#{generate_template(w_f, :workflow_items)}';" %>
  <%= w_f.error_messages %>

  <div class="form_column_left">
    <p class="form_item">
      <% if @workflow.new_record? %>
        <%= w_f.label :period_id, raw(Workflow.human_attribute_name(:period_id) +
            link_to_add(new_period_path(:back_to => new_workflow_path))), :class => :inline %>
        <%= w_f.select :period_id, Period.list.map { |p| [p.inspect, p.id] },
          {:prompt => true}, {:class => :inline_item} %>
      <% else %>
        <label class="inline"><%= Workflow.human_attribute_name :period_id %>:</label>
        <%= text_field_tag :period_description, @workflow.period.inspect,
          :class => :inline_item, :size => nil, :readonly => true %>
        <%=  %>
      <% end %>
    </p>
  </div>
  <div class="form_column_right">
     <p class="form_item">
      <% if @workflow.new_record? %>
        <%= w_f.label :review_id, nil, :class => :inline %>
        <% with_period = @workflow.period_id && @workflow.period_id > 0 %>
        <%= w_f.select :review_id,
            (with_period ? Review.list_without_final_review.
              list_all_without_workflow(@workflow.period_id).
              map { |r| [r.identification, r.id] } : []),
          {:prompt => true},
          (with_period && @workflow.new_record? ? {} : {:disabled => true}).merge(:class => :inline_item) %>
      <% else %>
        <label class="inline"><%= Workflow.human_attribute_name :review_id %>:</label>
        <%= text_field_tag :review_description, @workflow.review,
          :class => :inline_item, :size => nil, :readonly => true %>
        <%=  %>
      <% end %>
    </p>
  </div>

  <table class="summary_table" style="clear: both; margin-top: 0em;">
    <thead>
      <tr>
        <th style="width: 10%;"></th>
        <th style="width: 45%;"><%= t('workflow.column_real') %></th>
        <th style="width: 45%;"><%= t('workflow.column_estimated') %></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><b><%= t('workflow.row_time') %></b></td>
        <td>
          <%= @workflow.new_record? ? '-' : show_detailed_distance_of_time(@workflow.begining, @workflow.ending) %>
          | <%= t(:worked_hours, :scope => [:workflow], :count => ('%.2f' % @workflow.human_unit_cost)) %>
        </td>
        <td><%= @workflow.plan_item ? show_detailed_distance_of_time(@workflow.plan_item.start, @workflow.plan_item.end) : '-' %></td>
      </tr>
      <tr style="vertical-align: text-top;">
        <td><b><%= t('workflow.row_cost') %></b></td>
        <td><%= t('number.currency.format.unit') %><span id="workflow_cost"><%= '%.2f' %  @workflow.cost %></span>
          <%= link_to_function t('workflow.calculate_estimated_amount'),
            "calculateCost()", :style => 'margin-left: .5em;' %></td>
        <td>
          <div id="estimated_amount">
            <%= render :partial => 'estimated_amount',
              :locals => {:plan_item => @workflow.review.try(:plan_item)} %>
          </div>
        </td>
      </tr>
    </tbody>
  </table>

  <div class="items">
    <div class="column_headers nested_items">
      <div class="item_column" style="width: 5%;">
        <h3><%= WorkflowItem.human_attribute_name :order_number %></h3>
      </div>
      <div class="item_column" style="width: 50%;">
        <h3><%= raw(WorkflowItem.human_attribute_name(:task) +
          show_inline_help_for(:workflow_task)) %></h3>
      </div>
      <div class="item_column" style="width: 10%;">
        <h3><%= WorkflowItem.human_attribute_name :start %></h3>
      </div>
      <div class="item_column" style="width: 10%;">
        <h3><%= WorkflowItem.human_attribute_name :end %></h3>
      </div>
      <div class="item_column" style="width: 10%;">
        <h3><%= raw(WorkflowItem.human_attribute_name(:predecessors) +
          show_inline_help_for(:workflow_predecessors)) %></h3>
      </div>
      <div class="item_column" style="width: 10%;"></div>
      <div class="clear"></div>
    </div>

    <div id="workflow_items">
      <%= w_f.fields_for :workflow_items, @workflow.workflow_items.sort! do |wi_f| %>
        <% hru_template ||= generate_template(wi_f, :resource_utilizations,
          :object => ResourceUtilization.new(:resource_type => 'User'),
          :partial => 'human_resource_utilization',
          :child_index => 'NEW_SUBRECORD') %>
        <% mru_template ||= generate_template(wi_f, :resource_utilizations,
          :object => ResourceUtilization.new(:resource_type => 'Resource'),
          :partial => 'material_resource_utilization',
          :child_index => 'NEW_SUBRECORD') %>
        <% js_extra << "var material_resource_utilization = '#{mru_template}';" unless mru_template == 0 %>
        <% js_extra << "var human_resource_utilization = '#{hru_template}';" unless hru_template == 0 %>
        <% mru_template = 0 %>
        <% hru_template = 0 %>
        <%= render :partial => 'workflow_item', :locals =>
          {:f => wi_f, :is_dynamic => false} %>
      <% end %>
    </div>
  </div>

  <p class="add_item">
    <%= link_to t('label.add_item'), '#', 'data-template' => :workflow_item,
      'data-event' => 'addNestedItem', 'data-container' => '#workflow_items' %>
  </p>

  <% if @workflow.overloaded? %>
    <p class="form_item">
      <%= w_f.label :allow_overload, t('workflow.allow_overload'),
        :class => 'inline error_field' %>
      <%= w_f.check_box :allow_overload, :class => :inline_item %>
    </p>
  <% end %>

  <%= hidden_lock_version(w_f) %>

  <p>
    <span class="button"><%= w_f.submit %></span>
  </p>
  <%= content_for :js_extra do %>
    <%= raw js_extra %>
  <% end %>
<% end %>
<!--[eoform:workflow] -->
<script type="text/javascript">
function calculateCost() {
  var costElement = $('#workflow_cost');
  var estimatedCost = 0;

  $('input[name$="[cost_per_unit]"]').each(function(i, e) {
    var unitsString = $(e).parents('.item').find('input[name$="[units]"]').val();
    var units = parseFloat(unitsString) || 0;

    estimatedCost += (parseFloat($(e).val()) || 0) * units;
  });

  costElement.html(
    estimatedCost.toFixed(2)
  ).stop(true, true).effect('highlight', {}, 2000);
}
  
jQuery(function() {
  $(document).on('autocomplete:update', 'input.autocomplete_field', function() {
    var item = $(this).data('item');

    if (item.cost_per_unit) {
      $(this).parents('.item:first').find('input[name$="[cost_per_unit]"]').val(
        item.cost_per_unit
      );
    }
  });
  
  $('#workflow_period_id').change(function() {
    var element = $(this);

    if(parseInt($(this).val()) > 0) {
      var url = '<%= reviews_for_period_workflows_path %>';
      
      Helper.showLoading(element);
      
      $.get(url, { period: $(this).val(), format: 'json' }, function(data) {
        HTMLUtil.updateOptions(
          $('#workflow_review_id'), HTMLUtil.optionsFromArray(data)
        );
      }).complete(function() {
        Helper.hideLoading(element);
        Helper.hideLoading('#workflow_review_id');
      });
    } else {
      element.val('').attr('disabled', true);
    }
  });
  
  $('#workflow_review_id').change(function() {
    var url = '<%= estimated_amount_workflows_path %>';
    var element = $(this);
    
    Helper.showLoading(element);
    
    $.get(url, { id: $(this).val() }, function(data) {
      $('#estimated_amount').html(data).stop(true, true).effect(
        'highlight', {}, 2000
      );
    }).complete(function() {
      Helper.hideLoading(element);
    });
  });

  Helper.makeSortable('#workflow_items', 'div.workflow_item', 'a.move');
  FormUtil.completeSortNumbers();
});
</script>